services:

  postgres:
    container_name: postgres_${NODE_ENV}
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=${DB_POSTGRESDB_USER}
      - POSTGRES_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - POSTGRES_DB=${DB_POSTGRESDB_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${DB_POSTGRESDB_USER} -d ${DB_POSTGRESDB_DATABASE}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8nnet

  n8n:
    container_name: n8n_${NODE_ENV}
    image: docker.n8n.io/n8nio/n8n:latest
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    environment:
      - NODE_ENV=${NODE_ENV}
      - N8N_BINARY_DATA_STORAGE_PATH=${N8N_BINARY_DATA_STORAGE_PATH}
      - DB_TYPE=${DB_TYPE}
      - DB_TABLE_PREFIX=${DB_TABLE_PREFIX}
      - DB_POSTGRESDB_DATABASE=${DB_POSTGRESDB_DATABASE}
      - DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST}
      - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - DB_POSTGRESDB_NON_ROOT_USER=${DB_POSTGRESDB_NON_ROOT_USER}
      - DB_POSTGRESDB_NON_ROOT_PASSWORD=${DB_POSTGRESDB_NON_ROOT_PASSWORD}
      - DB_POSTGRESDB_POOL_SIZE=${DB_POSTGRESDB_POOL_SIZE}
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
      - N8N_TEMPLATES_ENABLED=${N8N_TEMPLATES_ENABLED}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_FOLDER=${N8N_USER_FOLDER}
      - N8N_HOST=${N8N_HOST}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - N8N_PERSONALIZATION_ENABLED=${N8N_PERSONALIZATION_ENABLED}
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED}
      - VUE_APP_URL_BASE_API=${VUE_APP_URL_BASE_API}
      - N8N_HIRING_BANNER_ENABLED=${N8N_HIRING_BANNER_ENABLED}
      - N8N_PUBLIC_API_SWAGGERUI_DISABLED=${N8N_PUBLIC_API_SWAGGERUI_DISABLED}
      - N8N_PUBLIC_API_DISABLED=${N8N_PUBLIC_API_DISABLED}
      - N8N_PROXY_HOPS=${N8N_PROXY_HOPS}
      - N8N_PAYLOAD_SIZE_MAX=${N8N_PAYLOAD_SIZE_MAX}
      - N8N_ENDPOINT_REST=${N8N_ENDPOINT_REST}
      - N8N_ENDPOINT_WEBHOOK=${N8N_ENDPOINT_WEBHOOK}
      - N8N_ENDPOINT_WEBHOOK_TEST=${N8N_ENDPOINT_WEBHOOK_TEST}
      - N8N_ENDPOINT_WEBHOOK_WAIT=${N8N_ENDPOINT_WEBHOOK_WAIT}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - EXECUTIONS_TIMEOUT=${EXECUTIONS_TIMEOUT}
      - EXECUTIONS_TIMEOUT_MAX=${EXECUTIONS_TIMEOUT_MAX}
      - EXECUTIONS_DATA_PRUNE=${EXECUTIONS_DATA_PRUNE}
      - EXECUTIONS_DATA_MAX_AGE=${EXECUTIONS_DATA_MAX_AGE}
      - EXECUTIONS_DATA_PRUNE_MAX_COUNT=${EXECUTIONS_DATA_PRUNE_MAX_COUNT}
      - N8N_CONCURRENCY_PRODUCTION_LIMIT=${N8N_CONCURRENCY_PRODUCTION_LIMIT}
      - N8N_DISABLED_MODULES=${N8N_DISABLED_MODULES}
      - N8N_LICENSE_DETACH_FLOATING_ON_SHUTDOWN=${N8N_LICENSE_DETACH_FLOATING_ON_SHUTDOWN}
      - NODES_EXCLUDE=${NODES_EXCLUDE}
      - N8N_UNVERIFIED_PACKAGES_ENABLED=${N8N_UNVERIFIED_PACKAGES_ENABLED}
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=${N8N_BLOCK_ENV_ACCESS_IN_NODE}
      - N8N_RESTRICT_FILE_ACCESS_TO=${N8N_RESTRICT_FILE_ACCESS_TO}
      - N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED}
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_ONBOARDING_FLOW_DISABLED=${N8N_ONBOARDING_FLOW_DISABLED}
      - N8N_WORKFLOW_ACTIVATION_BATCH_SIZE=${N8N_WORKFLOW_ACTIVATION_BATCH_SIZE}
      - N8N_WORKFLOW_TAGS_DISABLED=${N8N_WORKFLOW_TAGS_DISABLED}
      - WORKFLOWS_DEFAULT_NAME=${WORKFLOWS_DEFAULT_NAME}
    volumes:
      - n8n_data:/home/node/.n8n
      - binary_data:/binaryData
      - local_files:/files
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - n8nnet

  n8n_backups:
    image: alpine:3.18
    container_name: n8n_backups_${NODE_ENV}
    restart: always
    environment:
      - BACKUP_PASSWORD=${BACKUP_PASSWORD}
    volumes:
      - ./scripts:/scripts
      - ./n8n_backups:/backups
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "echo '0 3 * * * /scripts/backup.sh' | crontab - && crond -f -L /dev/stdout"

volumes:
  postgres_data:
  n8n_data:
  binary_data:
  local_files:
  backups:
    name: n8n_backups

networks:
  n8nnet:
    driver: bridge
